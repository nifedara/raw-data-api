---
- name: Setup Instance Packages
  hosts: all
  become: yes

  vars:
    app:
      base_uri: 'raw-data.example.net'
      bind_port: '8000'

  tasks:
    - name: Update apt cache and upgrade packages
      ansible.builtin.apt:
        update_cache: yes
        upgrade: dist
        dpkg_options: 'force-confold,force-confdef'
        cache_valid_time: 14400

    - name: Install generic packages
      ansible.builtin.apt:
        pkg:
          - python-is-python3
          - python3-virtualenv
          - redis-tools
          - certbot
          - wget
          - curl
          - git
          - podman
          - buildah
        state: latest

    - name: Install app-specific packages
      ansible.builtin.apt:
        pkg:
          - libpq-dev
          - osm2pgsql
          - osmium-tool
          - gdal-bin
          - python3-gdal
        state: present

    - name: Install caddy
      ansible.builtin.apt:
        deb: https://github.com/caddyserver/caddy/releases/download/v2.6.4/caddy_2.6.4_linux_amd64.deb

    - name: Generate caddy forwarding proxy configuration
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/Caddyfile.j2"
        dest: /etc/caddy/Caddyfile
        owner: root
        group: root
        mode: '0444'

    - name: Install caddy systemd file
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/caddyserver/dist/master/init/caddy.service
        dest: /etc/systemd/system/caddy.service
        owner: root
        group: root
        mode: '0644'

    - name: Mark project directory safe in git
      ansible.builtin.command: git config --global --add safe.directory /opt/raw-data-api

    - name: Clone the raw-data-api repo
      ansible.builtin.git:
        repo: https://github.com/hotosm/raw-data-api.git
        dest: /opt/raw-data-api

    - name: Set directory ownership and permissions
      ansible.builtin.file:
        owner: "{{ LINUX_PROCESS_USER }}"
        group: "{{ LINUX_PROCESS_GROUP }}"
        path: /opt/raw-data-api
        recurse: true
        mode: u+rw,g-wx,o-rwx

    - name: Generate config file for backend
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/config.txt.j2"
        dest: /opt/raw-data-api/config.txt
        owner: "{{ LINUX_PROCESS_USER }}"
        group: "{{ LINUX_PROCESS_GROUP }}"
        mode: '0444'

    - name: Generate env file containing PostgreSQL credentials
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/database.env.j2"
        dest: /opt/raw-data-api/backend/database.env
        owner: "{{ LINUX_PROCESS_USER }}"
        group: "{{ LINUX_PROCESS_GROUP }}"
        mode: '0444'

    - name: Setup Virtualenv and install API requirements.txt
      ansible.builtin.pip:
        requirements: /opt/raw-data-api/requirements.txt
        virtualenv: /opt/raw-data-api/.virtualenv
        virtualenv_site_packages: yes

    - name: Install backend requirements.txt into the same Virtualenv
      ansible.builtin.pip:
        requirements: /opt/raw-data-api/backend/requirements.txt
        virtualenv: /opt/raw-data-api/.virtualenv
        virtualenv_site_packages: yes

    - name: Copy raw-data service files
      ansible.builtin.copy:
        src: "/opt/raw-data-api/infra/systemd/{{ item }}"
        remote_src: yes
        dest: "/etc/systemd/system/{{ item }}"
        owner: root
        group: root
        mode: '0644'
      loop:
        - raw-data-backend.service
        - raw-data-api.service
        - raw-data-worker.service

    - name: Check redis is reachable
      ansible.builtin.wait_for:
        host: "{{ REDIS_HOST }}"
        port: "{{ REDIS_PORT }}"
        timeout: 5

    - name: Check if PostgreSQL is reachable
      ansible.builtin.wait_for:
        host: "{{ PGHOST }}"
        port: "{{ PGPORT }}"
        timeout: 5

    - name: Check if PostgreSQL is connectible
      community.postgresql.postgresql_ping:
        login_db: "{{ PGDATABASE }}"
        login_host: "{{ PGHOST }}"
        login_user: "{{ PGUSER }}"
        login_password: "{{ PGPASSWORD }}"
        ssl_mode: require
      register: pgping_result

    - name: Force systemd to reread configs just-in-case
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Enable raw-data backend service and ensure it is running
      ansible.builtin.systemd:
        name: raw-data-backend.service
        enabled: true
        state: started
      when: pgping_result.is_available == true

    - name: Ensure raw-data API and worker services are enabled and running
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - raw-data-api.service
        - raw-data-worker.service

    - name: Check if API serivce is reachable locally
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 8000
        timeout: 5

    - name: Enable raw-data worker service and ensure it is running
      ansible.builtin.systemd:
        name: caddy.service
        enabled: true
        state: started
...

